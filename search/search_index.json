{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESME - Git practical session - Introduction","text":""},{"location":"#what-we-have-seen-last-week","title":"What we have seen last week","text":"<ul> <li>git concept &amp; basic commands</li> <li>branches</li> <li>pull request &amp; review process</li> <li>simple feature branch workflow</li> <li>ci/cd introduction</li> <li>zoom on github</li> </ul>"},{"location":"#commands-recap","title":"Commands recap","text":"<ul> <li><code>git init</code> Initialize a git repository</li> <li><code>git add &lt;file_name&gt;</code> add a file to staging area</li> <li><code>git commit -m \"an explicit message\"</code> </li> <li><code>git push origin &lt;branch_name&gt;</code> </li> <li><code>git branch &lt;branch_name&gt;</code> create a new branch</li> <li><code>git checkout &lt;branch_name&gt;</code> switch to branch <code>&lt;branch_name&gt;</code></li> <li><code>git checkout -b &lt;branch_name&gt;</code> create and switch to new branch <code>&lt;branch_name&gt;</code></li> </ul>"},{"location":"#branch-coding-workflow","title":"Branch &amp; coding workflow","text":"<p>Reminder: Don't code on master branch</p>"},{"location":"#the-minimal-workflow-can-be-used-when-coding-alone","title":"The minimal workflow, can be used when coding alone","text":"<pre><code>---\ntitle: Minimal workflow\n---\n%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit</code></pre>"},{"location":"#a-basic-feature-branch-workflow","title":"A basic feature branch workflow","text":"<pre><code>---\ntitle: Basic feature branch workflow\n---\n    %%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\n    gitGraph\n       commit id: \"1\"\n       commit id: \"2\"\n       branch feature_1\n       checkout feature_1\n       commit id: \"3\"\n       checkout main\n       commit id: \"4\"\n       checkout main\n       branch feature_2\n       checkout feature_2\n       commit id: \"5\"\n       checkout main\n       commit id: \"6\"\n       checkout feature_1\n       commit id: \"7\"\n       checkout main\n       merge feature_1 id: \"customID\" tag: \"customTag\" type: REVERSE\n       checkout feature_2\n       commit id: \"8\"\n       checkout main\n       commit id: \"9\"</code></pre>"},{"location":"#best-practices","title":"Best practices","text":""},{"location":"#make-single-purpose-small-commits","title":"Make single-purpose &amp; small commits","text":"<p>By creating small commits, it helps everyone in a team to understand what have been done. Also, it's easier to revert a small change in case of bug.</p>"},{"location":"#share-only-what-is-necessary-add-gitignore-to-you-repository","title":"Share only what is necessary, add .gitignore to you repository","text":"<p><code>.gitignore</code> list all the files and folder that must not be tracked</p>"},{"location":"#ginignore-simple-example","title":"<code>.ginignore</code> simple example :","text":"<pre><code>__pycache__/\nvenv/\ndata/\ndownload/\nlog.txt\nany_file_you_want_to_exclude.any_extension\n</code></pre>"},{"location":"#commit-often-branch-frequently","title":"Commit often &amp; branch frequently","text":"<p>Prefer short-term branch, this will improve the traceability and highly simplify the code review process. Try to not include large number of change in the same branch, and avoid unrelated changes.</p> <p>It's better to commit something un-perfect than nothing  </p>"},{"location":"#write-detailed-commit-message-but-short","title":"Write detailed commit message (but short !)","text":"<p>When reading a commit message, anyone should be able to understand what have been done. In general, try to explain what changed from previous code and why.</p> <p>Some good examples: </p> <ul> <li>Change led GPIO from 20 to 18</li> <li>Fix baud-rate for SPI communication with adc</li> <li>Change unit from miles to kilometers in compute_distance method</li> </ul> <p>Some bad examples:</p> <ul> <li>Update file1, file2</li> <li>A modification</li> </ul>"},{"location":"exercice/","title":"Exercice","text":""},{"location":"exercice/#exercise","title":"Exercise","text":"<p>The goal of this exercise is to simulate a project consisting in developing a robot assistant which has many features,  such as detecting persons, providing the temperature, recording cardiac frequency etc... And collaborate on its  development using git. The development will be done in python for simplicity, as it's not a python lecture, feel free to create methods that only print something. </p> <p>Form groups of 3 or 4 people</p>"},{"location":"exercice/#1-create-a-new-git-repository-locally-and-remotely-on-github","title":"1 - Create a new git repository (locally and remotely on Github)","text":"<p>You can start by adding a README.md and a .gitignore file to your empty repository</p>"},{"location":"exercice/#2-lets-build-a-task-tracking-board","title":"2 - Let's build a task tracking board","text":"<p>It can be done on github directly, which provide a very nice integration between task &amp; branch You can choose the task management application of you choice, you just need to check that it provide an integration with github</p> <p>It can be :</p> <ul> <li>Linear</li> <li>Asana</li> <li>Notion (it's not dedicated to task tracking but provides a nice board feature)</li> </ul>"},{"location":"exercice/#3-create-your-backlog","title":"3 - Create your backlog","text":"<p>Add the following tasks to your board :  * Implement a basic robot class  * b * b * f * 1 * B * b</p>"},{"location":"exercice/#_1","title":"Exercice","text":"<p>In a file <code>robot.py</code></p> <pre><code>class Robot:\ndef __init__(self, name):\nself.name = name\ndef say_hello(self):\nprint(f\"hello, my name is {self.name}\")\n</code></pre> <p>In your <code>main.py</code></p> <pre><code>from robot import Robot\ndef start():\nrobot = Robot(robot=\"my_robot_name\")\nrobot.say_hello()\nif __name__ == '__main__':\nstart()\n</code></pre>"},{"location":"exercice/#bonus","title":"Bonus","text":"<p>Create a continuous integration pipeline using github action to automate test execution on pull request and on merge</p>"}]}